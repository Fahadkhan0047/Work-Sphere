generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  name         String
  email        String            @unique
  password     String
  createdAt    DateTime          @default(now())
  workspaces   Workspace[]       // Workspaces the user owns
  tasks        Task[]            @relation("AssignedTasks")
  comments     Comment[]
  memberships  WorkspaceMember[] 
}

model Workspace {
  id        String            @id @default(uuid())
  name      String
  owner     User              @relation(fields: [ownerId], references: [id])
  ownerId   String
  slug      String            @unique
  projects  Project[]
  createdAt DateTime          @default(now())
  members   WorkspaceMember[] 
}

model WorkspaceMember {
  id          String     @id @default(uuid())
  role        String     // e.g. "owner", "admin", "member"
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([userId, workspaceId]) // prevent duplicate membership
}

model Project {
  id          String    @id @default(uuid())
  name        String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  columns     Column[]
  createdAt   DateTime  @default(now())
}

model Column {
  id        String   @id @default(uuid())
  name      String
  order     Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  tasks     Task[]
}

model Task {
  id           String   @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime?
  priority     String?
  order        Int
  column       Column   @relation(fields: [columnId], references: [id])
  columnId     String
  assignedTo   User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  comments     Comment[]
  createdAt    DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
